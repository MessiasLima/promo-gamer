apply plugin: 'jacoco'
apply plugin: Android.gradlePlugin.library

jacoco {
    toolVersion = "0.8.7"
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    '**/*_Impl.*',
                    '**/*_Factory.*',
                    '**/*_*',
                    'hilt_aggregated_deps/*'
            ]
            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

            getSourceDirectories().setFrom(
                    files([
                            "$project.projectDir/src/main/java",
                            "$project.projectDir/src/${variantName}/java",
                            "$project.projectDir/src/main/kotlin",
                            "$project.projectDir/src/${variantName}/kotlin"
                    ])
            )

            def execFile = null
            if (testTaskName == "testDebugUnitTest") {
                execFile = files("${project.buildDir}/outputs/unit_test_code_coverage/debugUnitTest/${testTaskName}.exec")
            }else {
                execFile = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }

            getExecutionData().setFrom(execFile)
        }
    }
}